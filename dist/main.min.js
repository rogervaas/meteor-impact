(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/js/main.js":[function(require,module,exports){
'use strict';

window.Utils = require('./utils');

var game = new Phaser.Game(Utils.getScreenWidth(), Utils.getScreenHeight(), Phaser.AUTO, 'meteorimpact-game');

window.playerState = {
    currentLevel: 'Game'
};

game.state.add('Boot', require('./states/boot'));
game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('Game', require('./states/game'));

game.state.start('Boot');


},{"./states/boot":"/Users/sadiqevani/Laboratory/meteorimpact-v2/src/js/states/boot.js","./states/game":"/Users/sadiqevani/Laboratory/meteorimpact-v2/src/js/states/game.js","./states/menu":"/Users/sadiqevani/Laboratory/meteorimpact-v2/src/js/states/menu.js","./states/preloader":"/Users/sadiqevani/Laboratory/meteorimpact-v2/src/js/states/preloader.js","./states/splash":"/Users/sadiqevani/Laboratory/meteorimpact-v2/src/js/states/splash.js","./utils":"/Users/sadiqevani/Laboratory/meteorimpact-v2/src/js/utils.js"}],"/Users/sadiqevani/Laboratory/meteorimpact-v2/src/js/entities/asteroids.js":[function(require,module,exports){
var Asteroids = function (sprite, game, x, y) {

  Phaser.Sprite.call(this, game, x, y, sprite);
  game.add.existing(this);

  game.physics.enable(this, Phaser.Physics.ARCADE);


  this.body.drag.set(100);
  this.body.maxVelocity.set(200);
};

Asteroids.prototype = Object.create(Phaser.Sprite.prototype);
Asteroids.prototype.constructor = Asteroids;

/**
 * Automatically called by World.update
 */
Asteroids.prototype.update = function() {



};

module.exports = Asteroids;

},{}],"/Users/sadiqevani/Laboratory/meteorimpact-v2/src/js/entities/player.js":[function(require,module,exports){
var Player = function (sprite, game, x, y) {

    Phaser.Sprite.call(this, game, x, y, sprite);
    game.add.existing(this);

    game.physics.enable(this, Phaser.Physics.ARCADE);


    this.body.drag.set(100);
    this.body.maxVelocity.set(200);
};

Player.prototype = Object.create(Phaser.Sprite.prototype);
Player.prototype.constructor = Player;

/**
 * Automatically called by World.update
 */
Player.prototype.update = function() {

    if (this.game.input.keyboard.isDown(Phaser.Keyboard.LEFT)) {
        this.body.angularVelocity = -200;
    } else if (this.game.input.keyboard.isDown(Phaser.Keyboard.RIGHT)) {
        this.body.angularVelocity = 200;
    } else {
        this.body.angularVelocity = 0;
    }

    if (this.game.input.keyboard.isDown(Phaser.Keyboard.UP)) {
        this.game.physics.arcade.accelerationFromRotation(this.rotation, 200, this.body.acceleration);
    } else {
        this.body.acceleration.set(0);
    }

};

Player.prototype.fire = function () {
    if (this.game.time.now > bulletTime)
    {
        bullet = bullets.getFirstExists(false);

        if (bullet)
        {
            bullet.reset(sprite.body.x + 16, sprite.body.y + 16);
            bullet.lifespan = 2000;
            bullet.rotation = sprite.rotation;
            game.physics.arcade.velocityFromRotation(sprite.rotation, 400, bullet.body.velocity);
            bulletTime = game.time.now + 50;
        }
    }
};

module.exports = Player;

},{}],"/Users/sadiqevani/Laboratory/meteorimpact-v2/src/js/states/boot.js":[function(require,module,exports){
var Boot = function () {};

module.exports = Boot;

Boot.prototype = {

  preload: function () {
    this.load.image('preloader', 'assets/preloader.gif');
  },

  create: function () {
    this.game.input.maxPointers = 1;

    if (this.game.device.desktop) {
      this.game.stage.scale.pageAlignHorizontally = true;
    } else {
      this.game.stage.scaleMode = Phaser.StageScaleMode.SHOW_ALL;
      this.game.stage.scale.minWidth =  480;
      this.game.stage.scale.minHeight = 260;
      this.game.stage.scale.maxWidth = 640;
      this.game.stage.scale.maxHeight = 480;
      this.game.stage.scale.forceLandscape = true;
      this.game.stage.scale.pageAlignHorizontally = true;
      this.game.stage.scale.setScreenSize(true);
    }

    this.game.state.start('Preloader');
  }
};

},{}],"/Users/sadiqevani/Laboratory/meteorimpact-v2/src/js/states/game.js":[function(require,module,exports){
var Player = require('../entities/player');
var Asteroids = require('../entities/asteroids');

var Game = function () {

  this.players = [];
  this.asteroids = [];

};

Game.prototype = {

  create: function () {

    //  This will run in Canvas mode, so let's gain a little speed and display
    this.game.renderer.clearBeforeRender = false;
    this.game.renderer.roundPixels = true;

    // Lets define the input for our game.
    this.game.input.keyboard.addKeyCapture([
      Phaser.Keyboard.LEFT,
      Phaser.Keyboard.RIGHT,
      Phaser.Keyboard.UP,
      Phaser.Keyboard.DOWN,
      Phaser.Keyboard.SPACEBAR
    ]);

    // Setting the global game physics
    this.game.physics.startSystem(Phaser.Physics.ARCADE);

    // Lets add our universe (background)
    this.game.add.tileSprite(0, 0, screen.width, screen.height, Utils.backgrounds[Utils.randomNumber(0,3)]);

    var x = (this.game.width / 2) - 100;
    var y = (this.game.height / 2) - 50;

    //this.testentity = new Player(this.game, x, y);
    //this.testentity.anchor.setTo(0.5, 0.5);
    //
    ////this.input.onDown.add(this.onInputDown, this);
    //
    //console.log(this.game);


    this.players.push(new Player("spaceship",this.game, x, y));
    this.players[0].anchor.setTo(0.5, 0.5);
    this.players[0].scale.setTo(0.5,0.5);

  },

  update: function () {

    this.screenWrap(this.players[0], this.game);

  },

  screenWrap : function (sprite, game) {

    if (sprite.x < 0) {
      sprite.x = game.width;
    } else if (sprite.x > game.width) {
      sprite.x = 0;
    }

    if (sprite.y < 0) {
      sprite.y = game.height;
    } else if (sprite.y > game.height) {
      sprite.y = 0;
    }
  },

  render : function () {
    this.game.debug.spriteInfo(this.players[0], 32, 32);
    this.game.debug.text('angularVelocity: ' + this.players[0].body.angularVelocity, 32, 200);
    this.game.debug.text('angularAcceleration: ' + this.players[0].body.angularAcceleration, 32, 232);
    this.game.debug.text('angularDrag: ' + this.players[0].body.angularDrag, 32, 264);
    this.game.debug.text('deltaZ: ' + this.players[0].body.deltaZ(), 32, 296);

  },

  onInputDown: function () {
    this.game.state.start('Menu');
  }
};

module.exports = Game;
},{"../entities/asteroids":"/Users/sadiqevani/Laboratory/meteorimpact-v2/src/js/entities/asteroids.js","../entities/player":"/Users/sadiqevani/Laboratory/meteorimpact-v2/src/js/entities/player.js"}],"/Users/sadiqevani/Laboratory/meteorimpact-v2/src/js/states/menu.js":[function(require,module,exports){
var Menu = function () {
  this.text = null;
};

module.exports = Menu;

Menu.prototype = {

  create: function () {
    this.game.add.tileSprite(0, 0, screen.width, screen.height, Utils.backgrounds[Utils.randomNumber(0,3)]);
    this.displayText();
    this.input.onDown.add(this.onDown, this);
  },

  update: function () {

  },

  onDown: function () {
    this.game.state.start(playerState.currentLevel);
  },

  displayText : function () {
    var x = this.game.width / 2;
    var y = this.game.height / 2;
    var style = { font: "65px Arial", fill: "#ffffff", align: "center" };
    this.text = this.add.text(x - 200, y - 200, "Press to Start", style);
  }
};

},{}],"/Users/sadiqevani/Laboratory/meteorimpact-v2/src/js/states/preloader.js":[function(require,module,exports){
var Preloader = function (game) {
  this.asset = null;
  this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

  preload: function () {
    this.asset = this.add.sprite(320, 240, 'preloader');
    this.asset.anchor.setTo(0.5, 0.5);

    this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
    this.load.setPreloadSprite(this.asset);

    this.load.image('testsprite', 'assets/test.png');

    this.load.image("spaceship", "assets/spaceships/playerShip1_blue.png");

    this.load.image("backgroundBlack", "assets/backgrounds/black.png");
    this.load.image("backgroundBlue", "assets/backgrounds/blue.png");
    this.load.image("backgroundDarkPurple", "assets/backgrounds/darkPurple.png");
    this.load.image("backgroundPurple", "assets/backgrounds/purple.png");
  },

  create: function () {
    this.asset.cropEnabled = false;
  },

  update: function () {
    if (!!this.ready) {
      this.game.state.start('Menu');
    }
  },

  onLoadComplete: function () {
    this.ready = true;
  }
};

},{}],"/Users/sadiqevani/Laboratory/meteorimpact-v2/src/js/states/splash.js":[function(require,module,exports){
var Splash = function () {
};

module.exports = Splash;

Splash.prototype = {
  create: function () {
  }
};
},{}],"/Users/sadiqevani/Laboratory/meteorimpact-v2/src/js/utils.js":[function(require,module,exports){
var Utils = {
    containsObject: function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    },

    randomNumber: function(minimum, maximum) {
        return Math.round(Math.random() * (maximum - minimum) + minimum);
    },

    getScreenWidth : function () {
        return screen.width;
    },

    getScreenHeight : function () {
        return screen.height;
    },

    backgrounds : [
    "backgroundBlack",
    "backgroundBlue",
    "backgroundDarkPurple",
    "backgroundPurple"
    ]
};

module.exports = Utils;
},{}]},{},["./src/js/main.js"])
//# sourceMappingURL=data:application/json;base64,
